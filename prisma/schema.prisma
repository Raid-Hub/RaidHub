generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./raidhub-sqlite.db"
}

model Profile {
  id                    String  @id @default(uuid())
  name                  String
  name2                 String  @default("name2")
  image                 String
  userId                String  @unique @map("user_id")
  destinyMembershipId   String  @unique @map("destiny_membership_id")
  destinyMembershipType Int     @map("destiny_membership_type")
  pinnedActivityId      String? @map("pinned_activity_id")
  vanity                String? @unique
  user                  User    @relation(name: "UserToProfile", fields: [userId], references: [id], onDelete: Cascade)
  pinnedPGCR            PGCR?   @relation(name: "PGCRToProfile", fields: [pinnedActivityId], references: [id], onDelete: SetNull)

  @@index([pinnedActivityId])
  @@map("profile")
}

model User {
  id                 String              @id @default(uuid())
  bungieMembershipId String              @unique @map("bungie_membership_id")
  email              String?             @unique
  emailVerified      DateTime?           @map("email_verified")
  createdAt          DateTime            @default(now()) @map("created_at")
  role               String              @default("USER")
  profile            Profile?            @relation(name: "UserToProfile")
  accounts           Account[]           @relation(name: "UserToAccount")
  sessions           Session[]           @relation(name: "UserToSession")
  raidHubAccessToken RaidHubAccessToken? @relation(name: "UserToRaidHubAccessToken")

  @@map("user")
}

// Represents an OAuth session. Do not edit these fields.
model Session {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  sessionToken String   @unique @map("session_token")
  expires      DateTime @default(now())
  user         User     @relation(name: "UserToSession", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("session")
}

// Represents an OAuth account. Do not edit these fields.
model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  displayName       String? @map("display_name")
  url               String? @map("url")
  refreshToken      String? @map("refresh_token")
  accessToken       String? @map("access_token")
  expiresAt         Int?    @map("expires_at")
  refreshExpiresAt  Int?    @map("refresh_expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token")
  sessionState      String? @map("session_state")
  user              User    @relation(name: "UserToAccount", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], name: "uniqueProviderAccountId")
  @@unique([provider, userId], name: "uniqueProviderUser")
  @@index([userId])
  @@map("account")
}

model RaidHubAccessToken {
  id        String   @id @default(uuid())
  userId    String   @unique @map("user_id")
  value     String
  expiresAt DateTime @map("expires_at")
  user      User     @relation(name: "UserToRaidHubAccessToken", fields: [userId], references: [id], onDelete: Cascade)

  @@map("raidhub_access_token")
}

model PGCR {
  id                 String    @id @map("instance_id")
  videoURL           String?   @map("video_url")
  profilesWithPinned Profile[] @relation(name: "PGCRToProfile")

  @@map("pgcr")
}
