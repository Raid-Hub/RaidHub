generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./raidhub-sqlite.db"
}

model Profile {
  destinyMembershipId   String  @id @map("destiny_membership_id")
  destinyMembershipType Int     @map("destiny_membership_type")
  bungieMembershipId    String  @unique @map("bungie_membership_id")
  name                  String
  image                 String
  pinnedActivityId      String? @map("pinned_activity_id")
  vanity                String? @unique
  bungieUser            User?   @relation("UserToProfilePrimary")
  user                  User    @relation("UserToProfile", fields: [bungieMembershipId], references: [id], onDelete: Cascade)
  pinnedPGCR            PGCR?   @relation("PGCRToProfile", fields: [pinnedActivityId], references: [id])

  @@index([pinnedActivityId])
  @@map("destiny_profile")
}

model User {
  id                         String              @id @map("bungie_membership_id")
  primaryDestinyMembershipId String?             @unique(map: "user_primary_destiny_membership_id") @map("primary_destiny_membership_id")
  email                      String?             @unique(map: "user_email_key")
  emailVerified              DateTime?           @map("email_verified")
  createdAt                  DateTime            @default(now()) @map("created_at")
  role                       String              @default("USER")
  accounts                   Account[]           @relation("UserToAccount")
  primaryProfile             Profile?            @relation("UserToProfilePrimary", fields: [primaryDestinyMembershipId], references: [destinyMembershipId])
  profiles                   Profile[]           @relation("UserToProfile")
  raidHubAccessToken         RaidHubAccessToken? @relation("UserToRaidHubAccessToken")
  sessions                   Session[]           @relation("UserToSession")

  @@map("bungie_user")
}

model Session {
  id           String   @id @default(uuid())
  userId       String   @map("bungie_membership_id")
  sessionToken String   @unique @map("session_token")
  expires      DateTime @default(now())
  user         User     @relation("UserToSession", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("session")
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("bungie_membership_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  displayName       String? @map("display_name")
  url               String? @map("url")
  refreshToken      String? @map("refresh_token")
  accessToken       String? @map("access_token")
  expiresAt         Int?    @map("expires_at")
  refreshExpiresAt  Int?    @map("refresh_expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token")
  sessionState      String? @map("session_state")
  user              User    @relation("UserToAccount", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], name: "uniqueProviderAccountId")
  @@unique([provider, userId], name: "uniqueProviderUser")
  @@index([userId])
  @@map("account")
}

model RaidHubAccessToken {
  id        String   @id @default(uuid())
  userId    String   @unique @map("bungie_membership_id")
  value     String
  expiresAt DateTime @map("expires_at")
  user      User     @relation("UserToRaidHubAccessToken", fields: [userId], references: [id], onDelete: Cascade)

  @@map("raidhub_access_token")
}

model PGCR {
  id                 String    @id @map("instance_id")
  videoURL           String?   @map("video_url")
  profilesWithPinned Profile[] @relation("PGCRToProfile")

  @@map("pgcr")
}

model Migration {
  id        String   @id
  isApplied Boolean  @map("is_applied")
  appliedAt DateTime @default(now()) @map("applied_at")

  @@map("_migration")
}
