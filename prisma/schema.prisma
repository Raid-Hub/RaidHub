generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  USER
  ADMIN
}

model Profile {
  id                    String  @id @default(uuid())
  name                  String
  image                 String
  userId                String  @unique @map("user_id")
  destinyMembershipId   String  @unique @map("destiny_membership_id")
  destinyMembershipType Int     @map("destiny_membership_type")
  pinnedActivityId      String? @map("pinned_activity_id")
  profileDecoration     String? @map("profile_decoration") @db.VarChar(512)
  vanity                String? @unique
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  pinnedPGCR            PGCR?   @relation(fields: [pinnedActivityId], references: [id], onDelete: SetNull)

  @@index([pinnedActivityId])
  @@map("profile")
}

model User {
  id                 String    @id @default(uuid())
  bungieMembershipId String    @unique @map("bungie_membership_id")
  email              String?   @unique
  emailVerified      DateTime? @map("email_verified")
  createdAt          DateTime  @default(now())
  role               Role      @default(USER)
  profile            Profile?
  accounts           Account[]
  sessions           Session[]

  @@map("user")
}

// Represents an OAuth session. Do not edit these fields.
model Session {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  sessionToken String   @unique @map("session_token")
  expires      DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("session")
}

// Represents an OAuth account. Do not edit these fields.
model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  displayName       String? @map("display_name")
  url               String? @map("url")
  refreshToken      String? @db.Text
  accessToken       String? @db.Text
  expiresAt         Int?
  refreshExpiresAt  Int?
  tokenType         String?
  scope             String?
  idToken           String? @db.Text
  sessionState      String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@unique([provider, userId])
  @@index([userId])
  @@map("account")
}

model PGCR {
  id                 String    @id @map("instance_id")
  videoURL           String?   @map("video_url")
  profilesWithPinned Profile[]

  @@map("pgcr")
}
