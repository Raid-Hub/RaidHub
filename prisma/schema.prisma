// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// do not edit these fields
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@unique([provider, userId])
  @@index([userId])
}

model User {
  id                    String        @id @default(cuid())
  name                  String
  bungieMembershipId    String        @unique @map("bungie_membership_id")
  destinyMembershipId   String        @unique @map("destiny_membership_id")
  destinyMembershipType Int           @map("destiny_membership_type")
  bungieUsername        String?       @map("bungie_username")
  discordUsername       String?       @map("discord_username")
  twitchUsername        String?       @map("twitch_username")
  twitterUsername       String?       @map("twitter_username")
  image                 String
  bungieAccessToken     AccessToken?
  bungieRefreshToken    RefreshToken?
  vanity                Vanity?
  pinnedActivityId      String?       @map("pinned_activity_id")
  pinnedPGCR            PGCR?         @relation(fields: [pinnedActivityId], references: [id], onDelete: SetNull)
  profileDecoration     String?       @map("profile_decoration") @db.VarChar(512)
  email                 String        @unique @default("")
  emailVerified         DateTime?     @map("email_verified")
  accounts              Account[]
  sessions              Session[]

  @@index([bungieMembershipId])
  @@index([destinyMembershipId])
  @@index([pinnedActivityId])
}

model AccessToken {
  id                 String   @id @default(uuid())
  bungieMembershipId String   @unique @map("bungie_membership_id")
  value              String   @db.Text
  expires            DateTime @default(now())
  user               User     @relation(fields: [bungieMembershipId], references: [bungieMembershipId], onDelete: Cascade)

  @@index([bungieMembershipId])
}

model RefreshToken {
  id                 String   @id @default(uuid())
  bungieMembershipId String   @unique @map("bungie_membership_id")
  value              String   @db.Text
  expires            DateTime @default(now())
  user               User     @relation(fields: [bungieMembershipId], references: [bungieMembershipId], onDelete: Cascade)

  @@index([bungieMembershipId])
}

// do not edit these fields
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  expires      DateTime @default(now())
  userId       String   @map("user_id")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Vanity {
  id                    String  @id @default(cuid())
  string                String  @unique
  destinyMembershipId   String  @map("destiny_membership_id")
  destinyMembershipType Int     @map("destiny_membership_type")
  userId                String? @unique @map("user_id")
  user                  User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([destinyMembershipId, destinyMembershipType])
  @@index([destinyMembershipId, destinyMembershipType])
}

model PGCR {
  id              String  @id
  videoURL        String? @map("video_url")
  usersWithPinned User[]
}
