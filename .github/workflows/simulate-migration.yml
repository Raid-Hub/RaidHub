name: Simulate Migration
on:
    push:
    workflow_dispatch:

concurrency:
    group: ${{ github.sha }}
    cancel-in-progress: false

env:
    TURSO_INSTALL_SKIP_SIGNUP: true
    TURSO_API_TOKEN: ${{ secrets.TURSO_API_TOKEN }}

jobs:
    check-migrations:
        name: Check migrations
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 20

            - name: Download dependencies
              run: |
                  yarn install --frozen-lockfile
                  yarn prisma generate

            - name: Install Turso CLI
              run: |
                  curl -sSfL https://get.tur.so/install.sh | bash
                  echo "PATH=$PATH:/home/runner/.turso" >> $GITHUB_ENV

            - name: Dry Run Database Migrations
              env:
                  TURSO_DATABASE_NAME: "staging"
              run: |
                  ./.github/scripts/turso-migrate.sh --dry

    simulate-migrations:
        needs: check-migrations
        # if: github.env.TURSO_PENDING_MIGRATIONS != 0
        name: Simulate migrations
        runs-on: ubuntu-latest
        env:
            TURSO_NEW_DATABASE_NAME: ${{ github.sha }}
            TURSO_PARENT_DATABASE_NAME: "staging"

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 20

            - name: Download dependencies
              run: |
                  yarn install --frozen-lockfile
                  yarn prisma generate

            - name: Install Turso CLI
              run: |
                  curl -sSfL https://get.tur.so/install.sh | bash
                  echo "PATH=$PATH:/home/runner/.turso" >> $GITHUB_ENV

            - name: Create Temp Database
              run: |
                  turso --version
                  echo $TURSO_PENDING_MIGRATIONS
                  echo "Creating temp database $TURSO_NEW_DATABASE_NAME from $TURSO_PARENT_DATABASE_NAME"
                  turso db create $TURSO_NEW_DATABASE_NAME --from-db $TURSO_PARENT_DATABASE_NAME --wait

            - name: Dry Run Database Migrations
              env:
                  TURSO_DATABASE_NAME: ${{ env.TURSO_NEW_DATABASE_NAME }}
              run: |
                  ./.github/scripts/turso-migrate.sh

            - name: Cleanup Temp Database
              run: |
                  turso --version
                  echo "Destroying temp database $TURSO_NEW_DATABASE_NAME"
                  turso db destroy $TURSO_NEW_DATABASE_NAME --yes
