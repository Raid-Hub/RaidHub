name: Deploy to Production

env:
    VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
    VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
    workflow_dispatch:

jobs:
    Deploy-to-Production:
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ./${{ github.event.repository.name }}
        steps:
            - name: Fail if branch is not main
              if: github.ref != 'refs/heads/main'
              run: |
                  echo "This workflow should not be triggered on a branch other than main"
                  exit 1
            - name: Check if user is a repo admin
              working-directory: ./
              run: |
                  if [[ $(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/collaborators/${{ github.actor }}/permission" | jq -r '.permission') != "admin" ]]; then
                    echo "Only repo admins can run this action."
                    exit 1
                  fi
            - name: Set up SSH
              working-directory: ./
              run: |
                  mkdir -p ~/.ssh
                  echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
                  chmod 600 ~/.ssh/id_ed25519
                  eval "$(ssh-agent -s)"
                  ssh-add ~/.ssh/id_ed25519

            - name: Config
              working-directory: ./
              run: |
                  git config --global credential.helper store
                  git config --global user.email "github-actions@raidhub.app"
                  git config --global user.name "GitHub Actions"

            - name: Clone Repo
              working-directory: ./
              run: git clone git@github.com:Raid-Hub/RaidHub-Website.git

            # - name: Bump Version
            #   run: |
            #       git fetch origin
            #       VERSION=$(./bump.sh)
            #       echo "Version: $VERSION"
            #       echo "VERSION=$VERSION" >> $GITHUB_ENV
            #       git add package.json
            #       git add public/manifest.json
            #       git commit -m "Bump $VERSION"

            - name: Install Vercel CLI
              run: npm install --global vercel@latest

            - name: Pull Vercel Environment Information
              run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

            - name: Merge latest PlanetScale deployment request
              timeout-minutes: 2
              env:
                  PLANETSCALE_SERVICE_TOKEN_ID: ${{secrets.PLANETSCALE_SERVICE_TOKEN_ID}}
                  PLANETSCALE_SERVICE_TOKEN: ${{secrets.PLANETSCALE_SERVICE_TOKEN}}
                  ORG_NAME: ${{secrets.PLANETSCALE_ORG_NAME}}
                  DB_NAME: ${{secrets.PLANETSCALE_DB_NAME}}
                  GITHUB_USER: ${{github.actor}}
              working-directory: ${{env.pscale_base_directory}}/cli-helper-scripts/
              run: ./merge-latest-open-deploy-request.sh

            - name: Build Project Artifacts
              run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

            - name: Deploy Project Artifacts to Vercel
              run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

            # - name: Create Tag
            #   run: |
            #       git tag -a v$${{ env.VERSION }} main -m "$(git log --pretty=format:"%s" main..HEAD)"
            #       git push origin
            #       git push --tags
