name: Version Bump and Release

on:
    workflow_dispatch:
    push:
        branches:
            - version-pipeline

jobs:
    bump-and-release:
        runs-on: ubuntu-latest
        # if: |
        #     github.event_name == 'workflow_dispatch' &&
        #     startsWith(github.ref, 'refs/heads/develop')
        steps:
            - name: Check if user is a repo admin
              run: |
                  if [[ $(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/collaborators/${{ github.actor }}/permission" | jq -r '.permission') != "admin" ]]; then
                    echo "Only repo admins can run this action."
                    exit 1
                  fi

            - name: Init repo
              run: |
                  git clone -b version-pipeline https://github.com/Raid-Hub/RaidHub-Website.git
                  cd RaidHub-Website
                  git config --local user.name "${GITHUB_ACTOR}"
                  git config --local user.email "${GITHUB_ACTOR}@users.noreply.github.com"
                  git fetch origin
                  VERSION=$(./bump.sh)
                  echo "Version: $VERSION"
                  git add package.json
                  git add public/manifest.json
                  git commit -m "Release version bump $VERSION"
                  git config --list --show-origin
                  git push origin version-pipeline
                  git checkout origin/test-main
                  git merge --squash -s theirs version-pipeline -m "Release v$VERSION"
                  git push origin test-main

            # - name: Create release
            #   uses: actions/create-release@v1
            #   env:
            #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            #   with:
            #       tag_name: $VERSION
            #       release_name: Release v$VERSION
            #       body: |
            #           Changes in this release:
            #           $(git log --pretty=format:"%s" develop --not main)
            #       draft: false
            #       prerelease: false
