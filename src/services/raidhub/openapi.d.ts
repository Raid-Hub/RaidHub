/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/manifest": {
    /**
     * /manifest
     * @description The RaidHub manifest provides definitions for all activities and versions in the RaidHub database.
     */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["ManifestResponse"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": components["schemas"]["ApiKeyError"];
          };
        };
      };
    };
  };
  "/player/search": {
    /**
     * /player/search
     * @description Search for players in the RaidHub database by Bungie name or platform display name.
     * Players who have not attempted a raid may not appear in the search results.
     * Results are ordered by a combination of the number of raid completions and last played date.
     */
    get: {
      parameters: {
        query: {
          count?: number;
          query: string;
          membershipType?: components["schemas"]["DestinyMembershipType"];
          global?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["PlayerSearchResponse"];
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            readonly "application/json": components["schemas"]["QueryValidationError"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": components["schemas"]["ApiKeyError"];
          };
        };
      };
    };
  };
  "/player/{membershipId}/activities": {
    /**
     * /player/{membershipId}/activities
     * @description Get a player's activity history. This endpoint uses date cursors to paginate through a player's activity history.
     * The first request should not include a cursor. Subsequent requests should include the `nextCursor`
     * value from the previous response. Note that the first request may not return the full number of activities requested
     * in order to optimize performance. Subsequent requests will return the full number of activities requested.
     */
    get: {
      parameters: {
        query?: {
          count?: number;
          cursor?: string;
        };
        path: {
          membershipId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["PlayerActivitiesResponse"];
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            readonly "application/json": components["schemas"]["QueryValidationError"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": components["schemas"]["ApiKeyError"];
          };
        };
        /** @description PlayerPrivateProfileError */
        403: {
          content: {
            readonly "application/json": {
              readonly membershipId: string;
            };
          };
        };
        /** @description Not found */
        404: {
          content: {
            readonly "application/json": {
              readonly membershipId: string;
            } | components["schemas"]["PathValidationError"];
          };
        };
      };
    };
  };
  "/player/{membershipId}/basic": {
    /**
     * /player/{membershipId}/basic
     * @description An extremely low-cost API call. Get basic information Bungie information about a player. The information is not
     * guaranteed to be fully up-to-date, however, it should be accurate enough for most use cases where
     * you only have the membershipId available.
     */
    get: {
      parameters: {
        path: {
          membershipId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["PlayerBasicResponse"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": components["schemas"]["ApiKeyError"];
          };
        };
        /** @description Not found */
        404: {
          content: {
            readonly "application/json": {
              readonly membershipId: string;
            } | components["schemas"]["PathValidationError"];
          };
        };
      };
    };
  };
  "/player/{membershipId}/profile": {
    /**
     * /player/{membershipId}/profile
     * @description Get a player's profile information. This includes global stats, activity stats, and world first entries.
     * This is used to hydrate the RaidHub profile page
     */
    get: {
      parameters: {
        path: {
          membershipId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["PlayerProfileResponse"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": components["schemas"]["ApiKeyError"];
          };
        };
        /** @description PlayerPrivateProfileError */
        403: {
          content: {
            readonly "application/json": {
              readonly membershipId: string;
            };
          };
        };
        /** @description Not found */
        404: {
          content: {
            readonly "application/json": {
              readonly membershipId: string;
            } | components["schemas"]["PathValidationError"];
          };
        };
      };
    };
  };
  "/player/{membershipId}/teammates": {
    /** /player/{membershipId}/teammates */
    get: {
      parameters: {
        path: {
          membershipId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["PlayerTeammatesResponse"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": components["schemas"]["ApiKeyError"];
          };
        };
        /** @description PlayerPrivateProfileError */
        403: {
          content: {
            readonly "application/json": {
              readonly membershipId: string;
            };
          };
        };
        /** @description Not found */
        404: {
          content: {
            readonly "application/json": {
              readonly membershipId: string;
            } | components["schemas"]["PathValidationError"];
          };
        };
      };
    };
  };
  "/activity/{instanceId}": {
    /**
     * /activity/{instanceId}
     * @description This endpoint replaces the PGCR endpoint. It returns an object with a shape more aligned with how RaidHub displays PGCRs.
     */
    get: {
      parameters: {
        path: {
          instanceId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["ActivityResponse"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": components["schemas"]["ApiKeyError"];
          };
        };
        /** @description Not found */
        404: {
          content: {
            readonly "application/json": {
              readonly instanceId: string;
            } | components["schemas"]["PathValidationError"];
          };
        };
      };
    };
  };
  "/leaderboard/individual/global/{category}": {
    /**
     * /leaderboard/individual/global/{category}
     * @description Individual leaderboards across all raids
     */
    get: {
      parameters: {
        query?: {
          count?: number;
          search?: string;
          page?: number;
        };
        path: {
          category: "clears" | "freshClears" | "sherpas" | "speedrun" | "powerRankings";
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["LeaderboardIndividualGlobalResponse"];
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            readonly "application/json": components["schemas"]["QueryValidationError"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": components["schemas"]["ApiKeyError"];
          };
        };
        /** @description Not found */
        404: {
          content: {
            readonly "application/json": {
              readonly membershipId: string;
            } | components["schemas"]["PathValidationError"];
          };
        };
      };
    };
  };
  "/leaderboard/individual/raid/{raid}/{category}": {
    /**
     * /leaderboard/individual/raid/{raid}/{category}
     * @description Individual leaderboards for a specific raid
     */
    get: {
      parameters: {
        query?: {
          count?: number;
          search?: string;
          page?: number;
        };
        path: {
          raid: string;
          category: "clears" | "freshClears" | "sherpas";
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["LeaderboardIndividualRaidResponse"];
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            readonly "application/json": components["schemas"]["QueryValidationError"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": components["schemas"]["ApiKeyError"];
          };
        };
        /** @description Not found */
        404: {
          content: {
            readonly "application/json": {
              readonly membershipId: string;
            } | {
              readonly raid: string;
            } | components["schemas"]["PathValidationError"];
          };
        };
      };
    };
  };
  "/leaderboard/individual/pantheon/{version}/{category}": {
    /**
     * /leaderboard/individual/pantheon/{version}/{category}
     * @description Individual leaderboards for a specific pantheon version
     */
    get: {
      parameters: {
        query?: {
          count?: number;
          search?: string;
          page?: number;
        };
        path: {
          version: string;
          category: "clears" | "freshClears" | "score";
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["LeaderboardIndividualPantheonResponse"];
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            readonly "application/json": components["schemas"]["QueryValidationError"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": components["schemas"]["ApiKeyError"];
          };
        };
        /** @description Not found */
        404: {
          content: {
            readonly "application/json": {
              readonly membershipId: string;
            } | {
              readonly path: string;
            } | components["schemas"]["PathValidationError"];
          };
        };
      };
    };
  };
  "/leaderboard/team/first/{activity}/{version}": {
    /**
     * /leaderboard/team/first/{activity}/{version}
     * @description Ranking of the first 1000 completions of each activity version.
     * Use the /contest endpoint instead to get the full rankings for the duration of the contest.
     */
    get: {
      parameters: {
        query?: {
          count?: number;
          search?: string;
          page?: number;
        };
        path: {
          activity: string;
          version: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["LeaderboardTeamFirstResponse"];
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            readonly "application/json": components["schemas"]["QueryValidationError"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": components["schemas"]["ApiKeyError"];
          };
        };
        /** @description Not found */
        404: {
          content: {
            readonly "application/json": {
              readonly membershipId: string;
            } | {
              readonly activity: string;
              readonly version: string;
            } | components["schemas"]["PathValidationError"];
          };
        };
      };
    };
  };
  "/leaderboard/team/contest/{raid}": {
    /**
     * /leaderboard/team/contest/{raid}
     * @description Ranking of all teams which completed the official contest version of the raid during the contest period.
     */
    get: {
      parameters: {
        query?: {
          count?: number;
          search?: string;
          page?: number;
        };
        path: {
          raid: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["LeaderboardTeamContestResponse"];
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            readonly "application/json": components["schemas"]["QueryValidationError"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": components["schemas"]["ApiKeyError"];
          };
        };
        /** @description Not found */
        404: {
          content: {
            readonly "application/json": {
              readonly membershipId: string;
            } | {
              readonly raid: string;
            } | components["schemas"]["PathValidationError"];
          };
        };
      };
    };
  };
  "/pgcr/{instanceId}": {
    /**
     * /pgcr/{instanceId}
     * @description Get a raw post game carnage report by instanceId.
     * This is essentially the raw data from the Bungie API, with a few fields trimmed off.
     * It should be a subset of the data returned by the Bungie API.
     * Useful if you need to access PGCRs when Bungie's API is down.
     */
    get: {
      parameters: {
        path: {
          instanceId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["PgcrResponse"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": components["schemas"]["ApiKeyError"];
          };
        };
        /** @description Not found */
        404: {
          content: {
            readonly "application/json": {
              readonly instanceId: string;
            } | components["schemas"]["PathValidationError"];
          };
        };
      };
    };
  };
  "/admin/query": {
    /**
     * /admin/query
     * @description Run a query against the database
     */
    post: {
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": {
            readonly query: string;
            /** @enum {string} */
            readonly type: "SELECT" | "EXPLAIN";
            /** @default false */
            readonly ignoreCost?: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["AdminQueryResponse"];
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            readonly "application/json": components["schemas"]["BodyValidationError"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": components["schemas"]["ApiKeyError"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            readonly "application/json": components["schemas"]["InsufficientPermissionsError"];
          };
        };
        /** @description AdminQuerySyntaxError */
        501: {
          content: {
            readonly "application/json": {
              readonly name: string;
              readonly code: string;
              readonly line: string;
              readonly position: number;
            };
          };
        };
      };
    };
  };
  "/authorize/admin": {
    /**
     * /authorize/admin
     * @description Authorize an admin user. Requires the client secret.
     */
    post: {
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": {
            readonly bungieMembershipId: string;
            readonly clientSecret: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["AuthorizeAdminResponse"];
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            readonly "application/json": components["schemas"]["BodyValidationError"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": components["schemas"]["ApiKeyError"];
          };
        };
        /** @description InvalidClientSecretError */
        403: {
          content: {
            readonly "application/json": {
              /** @enum {boolean} */
              readonly unauthorized: true;
            };
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @enum {string} */
    readonly ErrorCode: "Unknown" | "ApiKeyError" | "PathValidationError" | "QueryValidationError" | "BodyValidationError" | "PlayerNotFoundError" | "PlayerPrivateProfileError" | "InstanceNotFoundError" | "PGCRNotFoundError" | "LeaderboardNotFoundError" | "PlayerNotOnLeaderboardError" | "RaidNotFoundError" | "PantheonVersionNotFoundError" | "InvalidActivityVersionComboError" | "AdminQuerySyntaxError" | "InsufficientPermissionsError" | "InvalidClientSecretError" | "InternalServerError";
    readonly RaidHubResponse: OneOf<[{
      /** Format: date-time */
      readonly minted: string;
      /** @enum {boolean} */
      readonly success: true;
      readonly response?: unknown;
    }, {
      /** Format: date-time */
      readonly minted: string;
      /** @enum {boolean} */
      readonly success: false;
      readonly code: components["schemas"]["ErrorCode"];
      readonly error?: unknown;
    }]>;
    readonly ApiKeyError: {
      /** Format: date-time */
      readonly minted: string;
      /** @enum {boolean} */
      readonly success: false;
      /** @enum {string} */
      readonly code: "ApiKeyError";
      readonly error: {
        readonly message: "Invalid API Key" | "Missing API Key";
        readonly apiKey: string | null;
        readonly origin: string | null;
      };
    };
    readonly ZodIssue: {
      readonly fatal?: boolean;
      readonly message: string;
      readonly path: readonly (string | number)[];
      /** @enum {string} */
      readonly code: "invalid_type" | "invalid_literal" | "custom" | "invalid_union" | "invalid_union_discriminator" | "invalid_enum_value" | "unrecognized_keys" | "invalid_arguments" | "invalid_return_type" | "invalid_date" | "invalid_string" | "too_small" | "too_big" | "invalid_intersection_types" | "not_multiple_of" | "not_finite";
    };
    readonly BodyValidationError: {
      /** Format: date-time */
      readonly minted: string;
      /** @enum {boolean} */
      readonly success: false;
      /** @enum {string} */
      readonly code: "BodyValidationError";
      readonly error: {
        readonly issues: readonly components["schemas"]["ZodIssue"][];
      };
    };
    readonly InsufficientPermissionsError: {
      /** Format: date-time */
      readonly minted: string;
      /** @enum {boolean} */
      readonly success: false;
      /** @enum {string} */
      readonly code: "InsufficientPermissionsError";
      readonly error: {
        /** @enum {string} */
        readonly message: "Forbidden";
      };
    };
    readonly PathValidationError: {
      /** Format: date-time */
      readonly minted: string;
      /** @enum {boolean} */
      readonly success: false;
      /** @enum {string} */
      readonly code: "PathValidationError";
      readonly error: {
        readonly issues: readonly components["schemas"]["ZodIssue"][];
      };
    };
    readonly QueryValidationError: {
      /** Format: date-time */
      readonly minted: string;
      /** @enum {boolean} */
      readonly success: false;
      /** @enum {string} */
      readonly code: "QueryValidationError";
      readonly error: {
        readonly issues: readonly components["schemas"]["ZodIssue"][];
      };
    };
    /** @enum {integer} */
    readonly DestinyMembershipType: 0 | 1 | 2 | 3 | 4 | 5 | 6 | -1;
    readonly Instance: {
      readonly instanceId: string;
      readonly hash: string;
      readonly activityId: number;
      readonly versionId: number;
      readonly completed: boolean;
      readonly flawless: boolean | null;
      readonly fresh: boolean | null;
      readonly playerCount: number;
      readonly score: number;
      /** Format: date-time */
      readonly dateStarted: string;
      /** Format: date-time */
      readonly dateCompleted: string;
      /** @description Activity duration in seconds */
      readonly duration: number;
      readonly platformType: components["schemas"]["DestinyMembershipType"];
      /** @description If the activity was completed before the day one end date */
      readonly isDayOne: boolean;
      /** @description If the activity was completed before the contest end date */
      readonly isContest: boolean;
      /** @description If the activity was completed before the week one end date */
      readonly isWeekOne: boolean;
    };
    readonly InstanceMetadata: {
      readonly activityName: string;
      readonly versionName: string;
      readonly isRaid: boolean;
    };
    readonly InstanceCharacterWeapon: {
      readonly weaponHash: string;
      readonly kills: number;
      readonly precisionKills: number;
    };
    readonly InstanceCharacter: {
      readonly characterId: string;
      readonly classHash: string | null;
      readonly emblemHash: string | null;
      readonly completed: boolean;
      readonly timePlayedSeconds: number;
      readonly startSeconds: number;
      readonly score: number;
      readonly kills: number;
      readonly deaths: number;
      readonly assists: number;
      readonly precisionKills: number;
      readonly superKills: number;
      readonly grenadeKills: number;
      readonly meleeKills: number;
      readonly weapons: readonly components["schemas"]["InstanceCharacterWeapon"][];
    };
    readonly InstancePlayer: {
      readonly completed: boolean;
      readonly isFirstClear: boolean;
      readonly sherpas: number;
      readonly timePlayedSeconds: number;
    };
    /**
     * @example {
     *   "bungieGlobalDisplayName": "Newo",
     *   "bungieGlobalDisplayNameCode": "9010",
     *   "membershipId": "4611686018488107374",
     *   "displayName": "xx_newo_xx",
     *   "iconPath": "/common/destiny2_content/icons/93844c8b76ea80683a880479e3506980.jpg",
     *   "membershipType": 3,
     *   "lastSeen": "2021-05-01T00:00:00.000Z",
     *   "isPrivate": false
     * }
     */
    readonly PlayerInfo: {
      readonly membershipId: string;
      readonly membershipType: components["schemas"]["DestinyMembershipType"];
      readonly iconPath: string | null;
      /** @description The platform-specific display name of the player. No longer shown in-game. */
      readonly displayName: string | null;
      readonly bungieGlobalDisplayName: string | null;
      readonly bungieGlobalDisplayNameCode: string | null;
      /** Format: date-time */
      readonly lastSeen: string;
      /** @description Whether or not the player has chosen to hide their on Bungie.net. */
      readonly isPrivate: boolean;
    };
    readonly InstancePlayerExtended: components["schemas"]["InstancePlayer"] & {
      readonly playerInfo: components["schemas"]["PlayerInfo"];
      readonly characters: readonly components["schemas"]["InstanceCharacter"][];
    };
    readonly InstanceExtended: components["schemas"]["Instance"] & ({
      readonly leaderboardRank: number | null;
      readonly metadata: components["schemas"]["InstanceMetadata"];
      readonly players: readonly components["schemas"]["InstancePlayerExtended"][];
    });
    readonly TeamLeaderboardEntry: {
      readonly position: number;
      readonly rank: number;
      readonly value: number;
      readonly instanceId: string;
      readonly players: readonly components["schemas"]["PlayerInfo"][];
    };
    readonly IndividualLeaderboardEntry: {
      readonly position: number;
      readonly rank: number;
      readonly value: number;
      readonly playerInfo: components["schemas"]["PlayerInfo"];
    };
    readonly LeaderboardData: OneOf<[{
      /** @enum {string} */
      readonly type: "team";
      /** @enum {string} */
      readonly format: "duration" | "numerical";
      readonly page: number;
      readonly count: number;
      readonly entries: readonly components["schemas"]["TeamLeaderboardEntry"][];
    }, {
      /** @enum {string} */
      readonly type: "individual";
      /** @enum {string} */
      readonly format: "duration" | "numerical";
      readonly page: number;
      readonly count: number;
      readonly entries: readonly components["schemas"]["IndividualLeaderboardEntry"][];
    }]>;
    /** @description Pagination parameters for leaderboard data */
    readonly LeaderboardPagination: {
      /** @default 50 */
      readonly count?: number;
      readonly search?: string;
      /**
       * @description Page number of leaderboard data. Ignored if `search` is provided. Defaults to 1
       * @default 1
       */
      readonly page?: number;
    };
    /**
     * @description The definition of an activity in the RaidHub database.
     * @example {
     *   "id": 9,
     *   "name": "Vault of Glass",
     *   "path": "vaultofglass",
     *   "isSunset": false,
     *   "isRaid": true,
     *   "releaseDate": "2021-05-22T00:00:00.000Z",
     *   "dayOneEnd": "2021-05-23T00:00:00.000Z",
     *   "contestEnd": "2021-05-23T00:00:00.000Z",
     *   "weekOneEnd": "2021-05-25T00:00:00.000Z",
     *   "milestoneHash": "1888320892"
     * }
     */
    readonly ActivityDefinition: {
      readonly id: number;
      readonly name: string;
      readonly path: string;
      readonly isSunset: boolean;
      readonly isRaid: boolean;
      /** Format: date-time */
      readonly releaseDate: string;
      /** Format: date-time */
      readonly dayOneEnd: string;
      /** Format: date-time */
      readonly contestEnd: string;
      /** Format: date-time */
      readonly weekOneEnd: string;
      readonly milestoneHash: string | null;
    };
    /** @description The definition of a version in the RaidHub database. */
    readonly VersionDefinition: {
      readonly id: number;
      readonly name: string;
      readonly path: string;
      readonly associatedActivityId: number | null;
      readonly isChallengeMode: boolean;
    };
    /** @description A raw PGCR with a few redundant fields removed */
    readonly RaidHubPostGameCarnageReport: {
      /** Format: date-time */
      readonly period: string;
      readonly startingPhaseIndex?: number;
      readonly activityWasStartedFromBeginning?: boolean;
      readonly activityDetails: {
        readonly directorActivityHash: string;
        readonly instanceId: string;
        /** @enum {integer} */
        readonly mode: 0 | 2 | 3 | 4 | 5 | 6 | 7 | 9 | 10 | 11 | 12 | 13 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91;
        readonly modes: readonly (0 | 2 | 3 | 4 | 5 | 6 | 7 | 9 | 10 | 11 | 12 | 13 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91)[];
        readonly membershipType: components["schemas"]["DestinyMembershipType"];
      };
      readonly entries: readonly ({
          readonly player: {
            readonly destinyUserInfo: {
              readonly iconPath?: string | null;
              readonly crossSaveOverride: components["schemas"]["DestinyMembershipType"];
              readonly applicableMembershipTypes?: (readonly components["schemas"]["DestinyMembershipType"][]) | null;
              readonly membershipType?: components["schemas"]["DestinyMembershipType"];
              readonly membershipId: string;
              readonly displayName?: string | null;
              readonly bungieGlobalDisplayName?: string | null;
              readonly bungieGlobalDisplayNameCode?: number | null;
            };
            readonly characterClass?: string | null;
            readonly classHash: number;
            readonly raceHash: number;
            readonly genderHash: number;
            readonly characterLevel: number;
            readonly lightLevel: number;
            readonly emblemHash: number;
          };
          readonly characterId: string;
          readonly values: {
            [key: string]: {
              readonly basic: {
                readonly value: number;
                readonly displayValue: string;
              };
            };
          };
          readonly extended?: {
            readonly weapons?: (readonly {
                readonly referenceId: number;
                readonly values: {
                  [key: string]: {
                    readonly basic: {
                      readonly value: number;
                      readonly displayValue: string;
                    };
                  };
                };
              }[]) | null;
            readonly values: {
              [key: string]: {
                readonly basic: {
                  readonly value: number;
                  readonly displayValue: string;
                };
              };
            };
          };
        })[];
    };
    readonly InstanceForPlayer: components["schemas"]["Instance"] & {
      readonly player: components["schemas"]["InstancePlayer"];
    };
    readonly PlayerProfileActivityStats: {
      readonly activityId: string;
      readonly freshClears: number;
      readonly clears: number;
      readonly sherpas: number;
      readonly trios: number;
      readonly duos: number;
      readonly solos: number;
      readonly fastestInstance: components["schemas"]["Instance"];
    };
    readonly GlobalStat: {
      readonly rank: number;
      readonly value: number;
    };
    readonly PlayerProfileGlobalStats: {
      readonly clears: components["schemas"]["GlobalStat"];
      readonly freshClears: components["schemas"]["GlobalStat"];
      readonly sherpas: components["schemas"]["GlobalStat"];
      readonly sumOfBest: components["schemas"]["GlobalStat"];
    };
    readonly WorldFirstEntry: {
      readonly activityId: number;
      readonly instanceId: string;
      readonly timeAfterLaunch: number;
      readonly rank: number;
      readonly isDayOne: boolean;
      readonly isContest: boolean;
      readonly isWeekOne: boolean;
      readonly isChallengeMode: boolean;
    };
    readonly PlayerProfile: {
      readonly playerInfo: components["schemas"]["PlayerInfo"];
      readonly stats: {
        readonly global: components["schemas"]["PlayerProfileGlobalStats"];
        readonly activity: {
          [key: string]: components["schemas"]["PlayerProfileActivityStats"];
        };
      };
      readonly worldFirstEntries: {
        [key: string]: components["schemas"]["WorldFirstEntry"];
      };
    };
    readonly Teammate: {
      readonly estimatedTimePlayedSeconds: number;
      readonly clears: number;
      readonly instanceCount: number;
      readonly playerInfo: components["schemas"]["PlayerInfo"];
    };
    readonly ManifestResponse: {
      /** @description The mapping of each Bungie.net hash to a RaidHub activityId and versionId */
      readonly hashes: {
        [key: string]: {
          readonly activityId: number;
          readonly versionId: number;
        };
      };
      /** @description The mapping of each RaidHub activityId to its definition */
      readonly activityDefinitions: {
        [key: string]: components["schemas"]["ActivityDefinition"];
      };
      /** @description The mapping of each RaidHub versionId to its definition */
      readonly versionDefinitions: {
        [key: string]: components["schemas"]["VersionDefinition"];
      };
      /** @description The list of all activityId in order of newest to oldest */
      readonly listedRaidIds: readonly number[];
      /** @description The list of inactive raid activityId */
      readonly sunsetRaidIds: readonly number[];
      /** @description The list of raid activityId which had a prestige mode */
      readonly prestigeRaidIds: readonly number[];
      /** @description The list of raid activityId which have a master mode */
      readonly masterRaidIds: readonly number[];
      /** @description The list of raid activityId which had a contest mode */
      readonly contestRaidIds: readonly number[];
      /** @description The list of raid activityId which have been reprised from Destiny 1 */
      readonly resprisedRaidIds: readonly number[];
      /** @description The list of version versionId which are the challenge mode for reprised raids */
      readonly resprisedChallengeVersionIds: readonly number[];
      /** @description The list of activityId for Pantheon */
      readonly pantheonIds: readonly number[];
      /** @description The set of versionId for each activityId */
      readonly versionsForActivity: {
        [key: string]: readonly number[];
      };
    };
    readonly PlayerSearchResponse: {
      readonly params: {
        readonly count: number;
        readonly query: string;
      };
      readonly results: readonly components["schemas"]["PlayerInfo"][];
    };
    readonly PlayerActivitiesResponse: {
      readonly membershipId: string;
      /** Format: date-time */
      readonly nextCursor: string;
      readonly activities: readonly components["schemas"]["InstanceForPlayer"][];
    };
    /**
     * @example {
     *   "bungieGlobalDisplayName": "Newo",
     *   "bungieGlobalDisplayNameCode": "9010",
     *   "membershipId": "4611686018488107374",
     *   "displayName": "xx_newo_xx",
     *   "iconPath": "/common/destiny2_content/icons/93844c8b76ea80683a880479e3506980.jpg",
     *   "membershipType": 3,
     *   "lastSeen": "2021-05-01T00:00:00.000Z",
     *   "isPrivate": false
     * }
     */
    readonly PlayerBasicResponse: {
      readonly membershipId: string;
      readonly membershipType: components["schemas"]["DestinyMembershipType"];
      readonly iconPath: string | null;
      /** @description The platform-specific display name of the player. No longer shown in-game. */
      readonly displayName: string | null;
      readonly bungieGlobalDisplayName: string | null;
      readonly bungieGlobalDisplayNameCode: string | null;
      /** Format: date-time */
      readonly lastSeen: string;
      /** @description Whether or not the player has chosen to hide their on Bungie.net. */
      readonly isPrivate: boolean;
    };
    readonly PlayerProfileResponse: {
      readonly playerInfo: components["schemas"]["PlayerInfo"];
      readonly stats: {
        readonly global: components["schemas"]["PlayerProfileGlobalStats"];
        readonly activity: {
          [key: string]: components["schemas"]["PlayerProfileActivityStats"];
        };
      };
      readonly worldFirstEntries: {
        [key: string]: components["schemas"]["WorldFirstEntry"];
      };
    };
    readonly PlayerTeammatesResponse: readonly components["schemas"]["Teammate"][];
    readonly ActivityResponse: components["schemas"]["Instance"] & ({
      readonly leaderboardRank: number | null;
      readonly metadata: components["schemas"]["InstanceMetadata"];
      readonly players: readonly components["schemas"]["InstancePlayerExtended"][];
    });
    readonly LeaderboardIndividualGlobalResponse: OneOf<[{
      /** @enum {string} */
      readonly type: "team";
      /** @enum {string} */
      readonly format: "duration" | "numerical";
      readonly page: number;
      readonly count: number;
      readonly entries: readonly components["schemas"]["TeamLeaderboardEntry"][];
    }, {
      /** @enum {string} */
      readonly type: "individual";
      /** @enum {string} */
      readonly format: "duration" | "numerical";
      readonly page: number;
      readonly count: number;
      readonly entries: readonly components["schemas"]["IndividualLeaderboardEntry"][];
    }]>;
    readonly LeaderboardIndividualRaidResponse: OneOf<[{
      /** @enum {string} */
      readonly type: "team";
      /** @enum {string} */
      readonly format: "duration" | "numerical";
      readonly page: number;
      readonly count: number;
      readonly entries: readonly components["schemas"]["TeamLeaderboardEntry"][];
    }, {
      /** @enum {string} */
      readonly type: "individual";
      /** @enum {string} */
      readonly format: "duration" | "numerical";
      readonly page: number;
      readonly count: number;
      readonly entries: readonly components["schemas"]["IndividualLeaderboardEntry"][];
    }]>;
    readonly LeaderboardIndividualPantheonResponse: OneOf<[{
      /** @enum {string} */
      readonly type: "team";
      /** @enum {string} */
      readonly format: "duration" | "numerical";
      readonly page: number;
      readonly count: number;
      readonly entries: readonly components["schemas"]["TeamLeaderboardEntry"][];
    }, {
      /** @enum {string} */
      readonly type: "individual";
      /** @enum {string} */
      readonly format: "duration" | "numerical";
      readonly page: number;
      readonly count: number;
      readonly entries: readonly components["schemas"]["IndividualLeaderboardEntry"][];
    }]>;
    readonly LeaderboardTeamFirstResponse: OneOf<[{
      /** @enum {string} */
      readonly type: "team";
      /** @enum {string} */
      readonly format: "duration" | "numerical";
      readonly page: number;
      readonly count: number;
      readonly entries: readonly components["schemas"]["TeamLeaderboardEntry"][];
    }, {
      /** @enum {string} */
      readonly type: "individual";
      /** @enum {string} */
      readonly format: "duration" | "numerical";
      readonly page: number;
      readonly count: number;
      readonly entries: readonly components["schemas"]["IndividualLeaderboardEntry"][];
    }]>;
    readonly LeaderboardTeamContestResponse: OneOf<[{
      /** @enum {string} */
      readonly type: "team";
      /** @enum {string} */
      readonly format: "duration" | "numerical";
      readonly page: number;
      readonly count: number;
      readonly entries: readonly components["schemas"]["TeamLeaderboardEntry"][];
    }, {
      /** @enum {string} */
      readonly type: "individual";
      /** @enum {string} */
      readonly format: "duration" | "numerical";
      readonly page: number;
      readonly count: number;
      readonly entries: readonly components["schemas"]["IndividualLeaderboardEntry"][];
    }]>;
    /** @description A raw PGCR with a few redundant fields removed */
    readonly PgcrResponse: {
      /** Format: date-time */
      readonly period: string;
      readonly startingPhaseIndex?: number;
      readonly activityWasStartedFromBeginning?: boolean;
      readonly activityDetails: {
        readonly directorActivityHash: string;
        readonly instanceId: string;
        /** @enum {integer} */
        readonly mode: 0 | 2 | 3 | 4 | 5 | 6 | 7 | 9 | 10 | 11 | 12 | 13 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91;
        readonly modes: readonly (0 | 2 | 3 | 4 | 5 | 6 | 7 | 9 | 10 | 11 | 12 | 13 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91)[];
        readonly membershipType: components["schemas"]["DestinyMembershipType"];
      };
      readonly entries: readonly ({
          readonly player: {
            readonly destinyUserInfo: {
              readonly iconPath?: string | null;
              readonly crossSaveOverride: components["schemas"]["DestinyMembershipType"];
              readonly applicableMembershipTypes?: (readonly components["schemas"]["DestinyMembershipType"][]) | null;
              readonly membershipType?: components["schemas"]["DestinyMembershipType"];
              readonly membershipId: string;
              readonly displayName?: string | null;
              readonly bungieGlobalDisplayName?: string | null;
              readonly bungieGlobalDisplayNameCode?: number | null;
            };
            readonly characterClass?: string | null;
            readonly classHash: number;
            readonly raceHash: number;
            readonly genderHash: number;
            readonly characterLevel: number;
            readonly lightLevel: number;
            readonly emblemHash: number;
          };
          readonly characterId: string;
          readonly values: {
            [key: string]: {
              readonly basic: {
                readonly value: number;
                readonly displayValue: string;
              };
            };
          };
          readonly extended?: {
            readonly weapons?: (readonly {
                readonly referenceId: number;
                readonly values: {
                  [key: string]: {
                    readonly basic: {
                      readonly value: number;
                      readonly displayValue: string;
                    };
                  };
                };
              }[]) | null;
            readonly values: {
              [key: string]: {
                readonly basic: {
                  readonly value: number;
                  readonly displayValue: string;
                };
              };
            };
          };
        })[];
    };
    readonly AdminQueryResponse: OneOf<[{
      /** @enum {string} */
      readonly type: "SELECT";
      readonly data: readonly {
          [key: string]: unknown;
        }[];
    }, {
      /** @enum {string} */
      readonly type: "HIGH COST";
      readonly data: unknown;
      readonly cost: number;
      readonly estimatedDuration: number;
    }, {
      /** @enum {string} */
      readonly type: "EXPLAIN";
      readonly data: readonly string[];
    }]>;
    readonly AuthorizeAdminResponse: {
      readonly value: string;
      /** Format: date-time */
      readonly expires: string;
    };
  };
  responses: never;
  parameters: {
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
